services:
  # ===
  # PostgreSQL to store data
  postgres:
    container_name: "postgres_db"
    build:
      context: .
      dockerfile: postgres_Dockerfile
    user: postgres
    labels:
      tag: "database"
    env_file:
      - .env
    ports:
      - ${POSTGRES_PORT}:${POSTGRES_PORT}
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./configs/postgresql/init-script-0.sql:/docker-entrypoint-initdb.d/000-init.sql
    networks:
      - db_network
    # healthcheck:
    #   test: ["CMD", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
    #   interval: 5s
    #   timeout: 5s
    #   retries: 5

  # Redis DB to store statement of celery
  redis:
    container_name: "redis_db"
    image: "redis:7-alpine"
    labels:
      tag: "database"
    env_file:
      - .env
    environment:
      REDIS_PORT: ${REDIS_PORT}
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    ports:
      - ${REDIS_PORT}:6379
    volumes:
      - ./configs/redis/redis.conf:/usr/local/etc/redis/redis.conf
      - ./configs/redis/logs:/var/log/redis
      - redis_data:/data
    networks:
      - db_network
    command: [
      "redis-server", "/usr/local/etc/redis/redis.conf",
      "--port", "${REDIS_PORT}",
      "--requirepass", "${REDIS_PASSWORD}"
    ]
    # healthcheck:
    #   test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
    #   interval: 5s
    #   timeout: 5s
    #   retries: 5

# ===
# Customize the network for all services
networks:
  web_network:
    name: web_network
    driver: bridge
  db_network:
    name: db_network
    driver: bridge
  celery_worker_network:
    name: celery_worker_network
    driver: bridge
volumes:
  redis_data:
    driver: local
  postgres_data:
    driver: local